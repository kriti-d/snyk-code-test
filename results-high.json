{
  "vulnerabilities": [
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-10-22T12:22:54.665794Z",
      "credit": [
        "Roman Burunkov"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[express-fileupload](https://github.com/richardgirges/express-fileupload) is a file upload middleware for express that wraps around busboy.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The package does not limit file name length.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `express-fileupload` to version 1.1.6-alpha.6 or higher.\n## References\n- [GitHub PR](https://github.com/richardgirges/express-fileupload/pull/171)\n",
      "disclosureTime": "2019-10-18T11:17:09Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.1.6-alpha.6"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-EXPRESSFILEUPLOAD-473997",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-79"
        ],
        "NSP": [
          1216
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:37:03.104573Z",
      "moduleName": "express-fileupload",
      "packageManager": "npm",
      "packageName": "express-fileupload",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-10-22T15:08:40Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/richardgirges/express-fileupload/pull/171"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.1.6-alpha.6"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "Denial of Service (DoS)",
      "from": [
        "goof@1.0.1",
        "express-fileupload@0.0.5"
      ],
      "upgradePath": [
        false,
        "express-fileupload@1.1.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "express-fileupload",
      "version": "0.0.5"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-11-20T09:54:27.277624Z",
      "credit": [
        "Vladyslav Babkin"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\n\nAffected versions of this package are vulnerable to Prototype Pollution.\nIt is possible to add or modify properties to the Object prototype through a malicious template. This may allow attackers to crash the application or execute Arbitrary Code in specific conditions.\n\n## Details\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\r\n\r\nThere are two main ways in which the pollution of prototypes occurs:\r\n\r\n-   Unsafe `Object` recursive merge\r\n    \r\n-   Property definition by path\r\n    \r\n\r\n### Unsafe Object recursive merge\r\n\r\nThe logic of a vulnerable recursive merge function follows the following high-level model:\r\n```\r\nmerge (target, source)\r\n\r\n  foreach property of source\r\n\r\n    if property exists and is an object on both the target and the source\r\n\r\n      merge(target[property], source[property])\r\n\r\n    else\r\n\r\n      target[property] = source[property]\r\n```\r\n<br>  \r\n\r\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\r\n\r\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\r\n\r\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\r\n\r\n### Property definition by path\r\n\r\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\r\n\r\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\r\n\r\n## Types of attacks\r\n\r\nThere are a few methods by which Prototype Pollution can be manipulated:\r\n\r\n| Type |Origin  |Short description |\r\n|--|--|--|\r\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\r\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\r\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\r\n\r\n## Affected environments\r\n\r\nThe following environments are susceptible to a Prototype Pollution attack:\r\n\r\n-   Application server\r\n    \r\n-   Web server\r\n    \r\n\r\n## How to prevent\r\n\r\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\r\n    \r\n2.  Require schema validation of JSON input.\r\n    \r\n3.  Avoid using unsafe recursive merge functions.\r\n    \r\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\r\n    \r\n5.  As a best practice use `Map` instead of `Object`.\r\n\r\n### For more information on this vulnerability type:\r\n\r\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\n\nUpgrade `handlebars` to version 4.5.3, 3.0.8 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7)\n\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1325)\n",
      "disclosureTime": "2019-11-18T19:42:01Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.5.3",
        "3.0.8"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-HANDLEBARS-534988",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          1325
        ]
      },
      "language": "js",
      "modificationTime": "2020-02-27T09:35:22.610611Z",
      "moduleName": "handlebars",
      "packageManager": "npm",
      "packageName": "handlebars",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-11-20T09:55:17Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1325"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=4.0.0 <4.5.3",
          "<3.0.8"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "Prototype Pollution",
      "from": [
        "goof@1.0.1",
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-reports@1.4.0",
        "handlebars@4.0.11"
      ],
      "upgradePath": [
        false,
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-reports@1.4.0",
        "handlebars@4.5.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "handlebars",
      "version": "4.0.11"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-08-17T15:07:51.732390Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[jsonpointer](https://www.npmjs.com/package/jsonpointer) is a Simple JSON Addressing.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `set` function.\r\n\r\n### POC by NerdJS\r\n```\r\nconst jsonpointer = require('jsonpointer');\r\njsonpointer.set({}, '/__proto__/polluted', true);\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jsonpointer` to version 4.1.0 or higher.\n## References\n- [GitHub Commit](https://github.com/janl/node-jsonpointer/commit/234e3437019c6c07537ed2ad1e03b3e132b85e34)\n",
      "disclosureTime": "2020-08-17T15:06:59Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.1.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-JSONPOINTER-598804",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-08-17T15:17:02.529823Z",
      "moduleName": "jsonpointer",
      "packageManager": "npm",
      "packageName": "jsonpointer",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-08-17T15:17:02.764391Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/janl/node-jsonpointer/commit/234e3437019c6c07537ed2ad1e03b3e132b85e34"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.1.0"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "Prototype Pollution",
      "from": [
        "goof@1.0.1",
        "tap@10.3.3",
        "coveralls@2.13.3",
        "request@2.79.0",
        "har-validator@2.0.6",
        "is-my-json-valid@2.20.0",
        "jsonpointer@4.0.1"
      ],
      "upgradePath": [
        false,
        "tap@10.3.3",
        "coveralls@2.13.3",
        "request@2.79.0",
        "har-validator@2.0.6",
        "is-my-json-valid@2.20.0",
        "jsonpointer@4.1.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "jsonpointer",
      "version": "4.0.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-05-12T07:43:39.631967Z",
      "credit": [
        "Dan Shallom",
        "OP Innovate Ltd"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to DLL Injection. An attacker can execute arbitrary code by creating a file with the same name in a folder that precedes the intended file in the DLL path search.\n## Remediation\nUpgrade `kerberos` to version 1.0.0 or higher.\n## References\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1514)\n",
      "disclosureTime": "2020-05-11T21:44:49Z",
      "exploit": "Unproven",
      "fixedIn": [
        "1.0.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-KERBEROS-568900",
      "identifiers": {
        "CVE": [
          "CVE-2020-13110"
        ],
        "CWE": [
          "CWE-114"
        ],
        "NSP": [
          1514
        ]
      },
      "language": "js",
      "modificationTime": "2020-05-12T21:52:20.222284Z",
      "moduleName": "kerberos",
      "packageManager": "npm",
      "packageName": "kerberos",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-05-12T21:52:20Z",
      "references": [
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1514"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.0.0"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "DLL Injection",
      "from": [
        "goof@1.0.1",
        "mongoose@4.2.4",
        "mongodb@2.0.46",
        "mongodb-core@1.2.19",
        "kerberos@0.0.24"
      ],
      "upgradePath": [
        false,
        "mongoose@4.2.5",
        "mongodb@2.0.48",
        "mongodb-core@1.2.21"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "kerberos",
      "version": "0.0.24"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "Prototype Pollution",
      "from": [
        "goof@1.0.1",
        "lodash@4.17.4"
      ],
      "upgradePath": [
        false,
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "Prototype Pollution",
      "from": [
        "goof@1.0.1",
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-types@6.26.0",
        "lodash@4.17.10"
      ],
      "upgradePath": [
        false,
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-types@6.26.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "Prototype Pollution",
      "from": [
        "goof@1.0.1",
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-generator@6.26.1",
        "lodash@4.17.10"
      ],
      "upgradePath": [
        false,
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-generator@6.26.1",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "Prototype Pollution",
      "from": [
        "goof@1.0.1",
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-traverse@6.26.0",
        "lodash@4.17.10"
      ],
      "upgradePath": [
        false,
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-traverse@6.26.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "Prototype Pollution",
      "from": [
        "goof@1.0.1",
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-template@6.26.0",
        "lodash@4.17.10"
      ],
      "upgradePath": [
        false,
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-template@6.26.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "Prototype Pollution",
      "from": [
        "goof@1.0.1",
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-generator@6.26.1",
        "babel-types@6.26.0",
        "lodash@4.17.10"
      ],
      "upgradePath": [
        false,
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-generator@6.26.1",
        "babel-types@6.26.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "Prototype Pollution",
      "from": [
        "goof@1.0.1",
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-traverse@6.26.0",
        "babel-types@6.26.0",
        "lodash@4.17.10"
      ],
      "upgradePath": [
        false,
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-traverse@6.26.0",
        "babel-types@6.26.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "Prototype Pollution",
      "from": [
        "goof@1.0.1",
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-template@6.26.0",
        "babel-types@6.26.0",
        "lodash@4.17.10"
      ],
      "upgradePath": [
        false,
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-template@6.26.0",
        "babel-types@6.26.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "Prototype Pollution",
      "from": [
        "goof@1.0.1",
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-template@6.26.0",
        "babel-traverse@6.26.0",
        "lodash@4.17.10"
      ],
      "upgradePath": [
        false,
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-template@6.26.0",
        "babel-traverse@6.26.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-07-24T12:05:01.916784Z",
      "credit": [
        "reeser"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n",
      "disclosureTime": "2020-07-24T12:00:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.17.20"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-LODASH-590103",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-08-16T12:11:40.402299Z",
      "moduleName": "lodash",
      "packageManager": "npm",
      "packageName": "lodash",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-16T13:09:06Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/lodash/lodash/issues/4874"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.17.20"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "Prototype Pollution",
      "from": [
        "goof@1.0.1",
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-template@6.26.0",
        "babel-traverse@6.26.0",
        "babel-types@6.26.0",
        "lodash@4.17.10"
      ],
      "upgradePath": [
        false,
        "tap@10.3.3",
        "nyc@11.9.0",
        "istanbul-lib-instrument@1.10.1",
        "babel-template@6.26.0",
        "babel-traverse@6.26.0",
        "babel-types@6.26.0",
        "lodash@4.17.20"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "lodash",
      "version": "4.17.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2020-08-12T10:32:42.440074Z",
      "credit": [
        "George Steketee",
        "Chris Davis"
      ],
      "cvssScore": 9.6,
      "description": "## Overview\n[tinymce](https://github.com/tinymce/tinymce-dist) is a Web based JavaScript HTML WYSIWYG editor control.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). It allows arbitrary JavaScript execution when inserting a specially crafted piece of content into the editor via the clipboard or APIs.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `tinymce` to version 4.9.11, 5.4.0 or higher.\n## References\n- [TinyMCE Release Notes](https://www.tiny.cloud/docs/release-notes/release-notes54/#securityfixes)\n",
      "disclosureTime": "2020-08-11T14:55:01Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.9.11",
        "5.4.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-TINYMCE-598223",
      "identifiers": {
        "CVE": [
          "CVE-2020-12648"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-vrv8-v4w8-f95h"
        ]
      },
      "language": "js",
      "modificationTime": "2020-08-12T10:53:14.352152Z",
      "moduleName": "tinymce",
      "packageManager": "npm",
      "packageName": "tinymce",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-08-12T10:53:14Z",
      "references": [
        {
          "title": "TinyMCE Release Notes",
          "url": "https://www.tiny.cloud/docs/release-notes/release-notes54/%23securityfixes"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.9.11",
          ">=5.0.0 <5.4.0"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "Cross-site Scripting (XSS)",
      "from": [
        "goof@1.0.1",
        "tinymce@4.1.0"
      ],
      "upgradePath": [
        false,
        "tinymce@4.9.11"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tinymce",
      "version": "4.1.0"
    }
  ],
  "ok": false,
  "dependencyCount": 486,
  "org": "demo-org-da9",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.19.0\n# ignores vulnerabilities until expiry date; change duration by modifying expiry date\nignore:\n  'npm:hoek:20180212':\n    - '*':\n        reason: ''\n        created: '2019-08-07T17:40:22.632Z'\n        ignoredBy:\n          id: d992a01f-f4f0-4555-9355-a12e00264840\n          name: Kriti Dogra\n          email: kriti.dogra@snyk.io\n        reasonType: temporary-ignore\n        disregardIfFixable: false\n        source: api\n  'npm:adm-zip:20180415':\n    - '*':\n        reason: ''\n        created: '2020-05-26T16:01:38.822Z'\n        ignoredBy:\n          id: d992a01f-f4f0-4555-9355-a12e00264840\n          name: Kriti Dogra\n          email: kriti.dogra@snyk.io\n        reasonType: temporary-ignore\n        disregardIfFixable: false\n        source: api\n  'npm:npmconf:20180512':\n    - '*':\n        reason: ''\n        created: '2020-10-01T20:17:55.719Z'\n        expires: '2020-10-31T20:17:44.159Z'\n        ignoredBy:\n          id: d992a01f-f4f0-4555-9355-a12e00264840\n          name: Kriti Dogra\n          email: kriti.dogra@snyk.io\n        reasonType: temporary-ignore\n        disregardIfFixable: false\n        source: api\n  'snyk:lic:npm:symbol:MPL-2.0':\n    - '*':\n        reason: ''\n        created: '2019-09-24T15:30:41.515Z'\n        ignoredBy:\n          id: d992a01f-f4f0-4555-9355-a12e00264840\n          name: Kriti Dogra\n          email: kriti.dogra@snyk.io\n        reasonType: wont-fix\n        disregardIfFixable: false\n        source: api\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "Apache-1.0": {
        "licenseType": "Apache-1.0",
        "severity": "high",
        "instructions": ""
      },
      "BSD-2-Clause": {
        "licenseType": "BSD-2-Clause",
        "severity": "medium",
        "instructions": ""
      },
      "AML": {
        "licenseType": "AML",
        "severity": "high",
        "instructions": ""
      }
    }
  },
  "packageManager": "npm",
  "projectId": "146258be-1cc4-42f3-b131-14efd5f5be51",
  "ignoreSettings": null,
  "summary": "312 vulnerable dependency paths",
  "remediation": {
    "unresolved": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2019-02-14T16:46:18.024227Z",
        "credit": [
          "Mahmoud Gamal",
          "Matias Lang"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Templates may alter an Objects' prototype, thus allowing an attacker to execute arbitrary code on the server.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `handlebars` to version 4.0.14, 4.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86)\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1495)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/755)\n",
        "disclosureTime": "2018-12-28T20:34:57Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.0.14",
          "4.1.2"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "dist/amd/handlebars/compiler/javascript-compiler.js",
              "functionName": "JavaScriptCompiler.prototype.nameLookup"
            },
            "version": [
              ">1.0.12 <4.0.13"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "dist/handlebars.js",
              "functionName": "JavaScriptCompiler.Handlebars.JavaScriptCompiler"
            },
            "version": [
              ">=1.0.6 <=1.0.12"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "dist/amd/handlebars/compiler/javascript-compiler.js",
              "functionName": "JavaScriptCompiler.prototype.nameLookup"
            },
            "version": [
              ">1.0.12 <4.0.13"
            ]
          },
          {
            "functionId": {
              "filePath": "dist/handlebars.js",
              "functionName": "JavaScriptCompiler.Handlebars.JavaScriptCompiler"
            },
            "version": [
              ">=1.0.6 <=1.0.12"
            ]
          }
        ],
        "id": "SNYK-JS-HANDLEBARS-173692",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-471"
          ],
          "GHSA": [
            "GHSA-6r5x-hmgg-7h53"
          ],
          "NSP": [
            755
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:56.040863Z",
        "moduleName": "handlebars",
        "packageManager": "npm",
        "packageName": "handlebars",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-02-14T17:52:50Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/wycats/handlebars.js/issues/1495"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/755"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.0.14",
            ">=4.1.0 <4.1.2"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-reports@1.4.0",
          "handlebars@4.0.11"
        ],
        "upgradePath": [
          false,
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-reports@1.4.0",
          "handlebars@4.0.14"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "name": "handlebars",
        "version": "4.0.11"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2019-04-14T11:55:45.212136Z",
        "credit": [
          "Nils Knappmeier"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A Prototype Pollution allowing Remote Code Execution can be exploited using the constructor, via the 'lookup' helper.\r\nThis vulnerability is due to an incomplete fix for: `SNYK-JS-HANDLEBARS-173692`\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `handlebars` to version 3.0.7, 4.1.2, 4.0.14 or higher.\n## References\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/cd38583216dce3252831916323202749431c773e)\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1495)\n- [SNYK-JS-HANDLEBARS-173692](https://snyk.io/vuln/SNYK-JS-HANDLEBARS-173692)\n",
        "disclosureTime": "2019-04-13T06:31:34Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.7",
          "4.1.2",
          "4.0.14"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lib/handlebars/helpers/lookup.js",
              "functionName": "module.exports"
            },
            "version": [
              ">3.0.6 <4.1.2"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "lib/handlebars/helpers/lookup.js",
              "functionName": "module.exports"
            },
            "version": [
              ">3.0.6 <4.1.2"
            ]
          }
        ],
        "id": "SNYK-JS-HANDLEBARS-174183",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-471"
          ],
          "GHSA": [
            "GHSA-q42p-pg8m-cqh6"
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:37:03.054230Z",
        "moduleName": "handlebars",
        "packageManager": "npm",
        "packageName": "handlebars",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-04-14T06:31:34Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/wycats/handlebars.js/commit/cd38583216dce3252831916323202749431c773e"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/wycats/handlebars.js/issues/1495"
          },
          {
            "title": "SNYK-JS-HANDLEBARS-173692",
            "url": "https://snyk.io/vuln/SNYK-JS-HANDLEBARS-173692"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <3.0.7",
            ">=4.1.0 <4.1.2",
            ">=4.0.0 <4.0.14"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-reports@1.4.0",
          "handlebars@4.0.11"
        ],
        "upgradePath": [
          false,
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-reports@1.4.0",
          "handlebars@4.0.14"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "name": "handlebars",
        "version": "4.0.11"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2019-09-25T13:12:40.749568Z",
        "credit": [
          "itszn"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n\n[handlebars](https://www.npmjs.com/package/handlebars) is a extension to the Mustache templating language.\n\n\nAffected versions of this package are vulnerable to Prototype Pollution.\nTemplates may alter an Object's `__proto__` and `__defineGetter__` properties, which may allow an attacker to execute arbitrary code on the server through crafted payloads.\n\n## Details\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\r\n\r\nThere are two main ways in which the pollution of prototypes occurs:\r\n\r\n-   Unsafe `Object` recursive merge\r\n    \r\n-   Property definition by path\r\n    \r\n\r\n### Unsafe Object recursive merge\r\n\r\nThe logic of a vulnerable recursive merge function follows the following high-level model:\r\n```\r\nmerge (target, source)\r\n\r\n  foreach property of source\r\n\r\n    if property exists and is an object on both the target and the source\r\n\r\n      merge(target[property], source[property])\r\n\r\n    else\r\n\r\n      target[property] = source[property]\r\n```\r\n<br>  \r\n\r\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\r\n\r\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\r\n\r\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\r\n\r\n### Property definition by path\r\n\r\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\r\n\r\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\r\n\r\n## Types of attacks\r\n\r\nThere are a few methods by which Prototype Pollution can be manipulated:\r\n\r\n| Type |Origin  |Short description |\r\n|--|--|--|\r\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\r\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\r\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\r\n\r\n## Affected environments\r\n\r\nThe following environments are susceptible to a Prototype Pollution attack:\r\n\r\n-   Application server\r\n    \r\n-   Web server\r\n    \r\n\r\n## How to prevent\r\n\r\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\r\n    \r\n2.  Require schema validation of JSON input.\r\n    \r\n3.  Avoid using unsafe recursive merge functions.\r\n    \r\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\r\n    \r\n5.  As a best practice use `Map` instead of `Object`.\r\n\r\n### For more information on this vulnerability type:\r\n\r\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\n\nUpgrade `handlebars` to version 4.3.0, 3.8.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/213c0bbe3c4bd83a534d67384e5afa0000347ff6)\n\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/7b67a29a8c926b38af265c727ff6551fbb277111)\n\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1558)\n\n- [Reference](https://www.npmjs.com/advisories/1164)\n\n- [Release Notes](https://github.com/wycats/handlebars.js/blob/master/release-notes.md#v430---september-24th-2019)\n",
        "disclosureTime": "2019-09-24T15:14:43Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.3.0",
          "3.8.0"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-HANDLEBARS-469063",
        "identifiers": {
          "CVE": [
            "CVE-2019-19919"
          ],
          "CWE": [
            "CWE-471"
          ],
          "NSP": [
            1164
          ]
        },
        "language": "js",
        "modificationTime": "2020-02-27T09:38:25.232243Z",
        "moduleName": "handlebars",
        "packageManager": "npm",
        "packageName": "handlebars",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-09-25T14:33:59Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/wycats/handlebars.js/commit/213c0bbe3c4bd83a534d67384e5afa0000347ff6"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/wycats/handlebars.js/commit/7b67a29a8c926b38af265c727ff6551fbb277111"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/wycats/handlebars.js/issues/1558"
          },
          {
            "title": "Reference",
            "url": "https://www.npmjs.com/advisories/1164"
          },
          {
            "title": "Release Notes",
            "url": "https://github.com/wycats/handlebars.js/blob/master/release-notes.md%23v430---september-24th-2019"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=4.0.0 <4.3.0",
            "<3.8.0"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-reports@1.4.0",
          "handlebars@4.0.11"
        ],
        "upgradePath": [
          false,
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-reports@1.4.0",
          "handlebars@4.3.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "name": "handlebars",
        "version": "4.0.11"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-11-05T12:16:29.016014Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The package's parser may be forced into an endless loop while processing specially-crafted templates, which may allow attackers to exhaust system resources leading to Denial of Service.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `handlebars` to version 4.4.5 or higher.\n## References\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/8d5530ee2c3ea9f0aee3fde310b9f36887d00b8b)\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1579)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1300)\n",
        "disclosureTime": "2019-10-30T15:57:14Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.4.5"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-HANDLEBARS-480388",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            1300
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:55.577532Z",
        "moduleName": "handlebars",
        "packageManager": "npm",
        "packageName": "handlebars",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-11-05T12:19:43Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/wycats/handlebars.js/commit/8d5530ee2c3ea9f0aee3fde310b9f36887d00b8b"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/wycats/handlebars.js/issues/1579"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/1300"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=4.0.0 <4.4.5"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Denial of Service (DoS)",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-reports@1.4.0",
          "handlebars@4.0.11"
        ],
        "upgradePath": [
          false,
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-reports@1.4.0",
          "handlebars@4.4.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "name": "handlebars",
        "version": "4.0.11"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2019-11-15T15:45:34.906048Z",
        "credit": [
          "Francois Lajeunesse-Robert"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. The package's lookup helper doesn't validate templates correctly, allowing attackers to submit templates that execute arbitrary JavaScript in the system.\n## Remediation\nUpgrade `handlebars` to version 4.5.3, 3.0.8 or higher.\n## References\n- [NPM Security Advisory #1](https://www.npmjs.com/advisories/1316)\n- [NPM Security Advisory #2](https://www.npmjs.com/advisories/1324)\n",
        "disclosureTime": "2019-11-14T15:29:41Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.5.3",
          "3.0.8"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-HANDLEBARS-534478",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-94"
          ],
          "NSP": [
            1316,
            1324
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:37:03.589231Z",
        "moduleName": "handlebars",
        "packageManager": "npm",
        "packageName": "handlebars",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-11-15T15:48:43Z",
        "references": [
          {
            "title": "NPM Security Advisory #1",
            "url": "https://www.npmjs.com/advisories/1316"
          },
          {
            "title": "NPM Security Advisory #2",
            "url": "https://www.npmjs.com/advisories/1324"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=4.0.0 <4.5.3",
            "<3.0.8"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-reports@1.4.0",
          "handlebars@4.0.11"
        ],
        "upgradePath": [
          false,
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-reports@1.4.0",
          "handlebars@4.5.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "name": "handlebars",
        "version": "4.0.11"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-11-20T09:54:27.277624Z",
        "credit": [
          "Vladyslav Babkin"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\n\nAffected versions of this package are vulnerable to Prototype Pollution.\nIt is possible to add or modify properties to the Object prototype through a malicious template. This may allow attackers to crash the application or execute Arbitrary Code in specific conditions.\n\n## Details\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\r\n\r\nThere are two main ways in which the pollution of prototypes occurs:\r\n\r\n-   Unsafe `Object` recursive merge\r\n    \r\n-   Property definition by path\r\n    \r\n\r\n### Unsafe Object recursive merge\r\n\r\nThe logic of a vulnerable recursive merge function follows the following high-level model:\r\n```\r\nmerge (target, source)\r\n\r\n  foreach property of source\r\n\r\n    if property exists and is an object on both the target and the source\r\n\r\n      merge(target[property], source[property])\r\n\r\n    else\r\n\r\n      target[property] = source[property]\r\n```\r\n<br>  \r\n\r\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\r\n\r\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\r\n\r\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\r\n\r\n### Property definition by path\r\n\r\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\r\n\r\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\r\n\r\n## Types of attacks\r\n\r\nThere are a few methods by which Prototype Pollution can be manipulated:\r\n\r\n| Type |Origin  |Short description |\r\n|--|--|--|\r\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\r\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\r\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\r\n\r\n## Affected environments\r\n\r\nThe following environments are susceptible to a Prototype Pollution attack:\r\n\r\n-   Application server\r\n    \r\n-   Web server\r\n    \r\n\r\n## How to prevent\r\n\r\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\r\n    \r\n2.  Require schema validation of JSON input.\r\n    \r\n3.  Avoid using unsafe recursive merge functions.\r\n    \r\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\r\n    \r\n5.  As a best practice use `Map` instead of `Object`.\r\n\r\n### For more information on this vulnerability type:\r\n\r\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\n\nUpgrade `handlebars` to version 4.5.3, 3.0.8 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7)\n\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1325)\n",
        "disclosureTime": "2019-11-18T19:42:01Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.5.3",
          "3.0.8"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-HANDLEBARS-534988",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            1325
          ]
        },
        "language": "js",
        "modificationTime": "2020-02-27T09:35:22.610611Z",
        "moduleName": "handlebars",
        "packageManager": "npm",
        "packageName": "handlebars",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-11-20T09:55:17Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/1325"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=4.0.0 <4.5.3",
            "<3.0.8"
          ]
        },
        "severity": "high",
        "severityWithCritical": "critical",
        "title": "Prototype Pollution",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-reports@1.4.0",
          "handlebars@4.0.11"
        ],
        "upgradePath": [
          false,
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-reports@1.4.0",
          "handlebars@4.5.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "name": "handlebars",
        "version": "4.0.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-04-28T14:26:34.538485Z",
        "credit": [
          "macasun"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Prototype access to the template engine allows for potential code execution.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `handlebars` to version 4.6.0 or higher.\n## References\n- [GitHub PR](https://github.com/handlebars-lang/handlebars.js/pull/1633)\n- [HackerOne Report](https://hackerone.com/reports/726364)\n",
        "disclosureTime": "2020-04-27T22:13:11Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.6.0"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-HANDLEBARS-567742",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:37:04.769831Z",
        "moduleName": "handlebars",
        "packageManager": "npm",
        "packageName": "handlebars",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-04-28T14:28:34Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/handlebars-lang/handlebars.js/pull/1633"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/726364"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.6.0"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-reports@1.4.0",
          "handlebars@4.0.11"
        ],
        "upgradePath": [
          false,
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-reports@1.4.0",
          "handlebars@4.6.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "name": "handlebars",
        "version": "4.0.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-08-02T12:09:52.577067Z",
        "credit": [
          "chalker"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[is-my-json-valid](https://github.com/mafintosh/is-my-json-valid) is a JSONSchema / orderly validator that uses code generation to be extremely fast.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `style` format. \r\n\r\n##PoC\r\n```\r\nconst imjv = require('is-my-json-valid')\r\nconst validate = imjv({ maxLength: 100, format: 'style' })\r\nconsole.log(validate(' '.repeat(1e4)))\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `is-my-json-valid` to version 2.20.2 or higher.\n## References\n- [GitHub Commit](https://github.com/mafintosh/is-my-json-valid/commit/c3fc04fc455d40e9b29537f8e2c73a28ce106edb)\n- [HackerOne Report](https://hackerone.com/reports/909757)\n",
        "disclosureTime": "2020-07-31T17:13:38Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.20.2"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-ISMYJSONVALID-597165",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-08-02T15:04:47.420926Z",
        "moduleName": "is-my-json-valid",
        "packageManager": "npm",
        "packageName": "is-my-json-valid",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-08-02T15:04:47.405171Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/mafintosh/is-my-json-valid/commit/c3fc04fc455d40e9b29537f8e2c73a28ce106edb"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/909757"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.20.2"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "coveralls@2.13.3",
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.20.0"
        ],
        "upgradePath": [
          false,
          "tap@10.3.3",
          "coveralls@2.13.3",
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.20.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "name": "is-my-json-valid",
        "version": "2.20.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-08-02T12:14:47.006233Z",
        "credit": [
          "chalker"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[is-my-json-valid](https://github.com/mafintosh/is-my-json-valid) is a JSONSchema / orderly validator that uses code generation to be extremely fast.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution via the `formatName` function.\r\n\r\n##PoC\r\n```const validator = require('is-my-json-valid')\r\nconst schema = {\r\n  type: 'object',\r\n  properties: {\r\n    'x[console.log(process.mainModule.require(`child_process`).execSync(`cat /etc/passwd`).toString(`utf-8`))]': {\r\n      required: true,\r\n      type:'string'\r\n    }\r\n  },\r\n}\r\nvar validate = validator(schema);\r\nvalidate({})\r\n```\n## Remediation\nUpgrade `is-my-json-valid` to version 2.20.3 or higher.\n## References\n- [GitHub Commit](https://github.com/mafintosh/is-my-json-valid/commit/3419563687df463b4ca709a2b46be8e15d6a2b3d)\n- [HackerOne Report](https://hackerone.com/reports/894308)\n",
        "disclosureTime": "2020-07-31T17:14:47Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.20.3"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-ISMYJSONVALID-597167",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "js",
        "modificationTime": "2020-08-02T15:04:45.893491Z",
        "moduleName": "is-my-json-valid",
        "packageManager": "npm",
        "packageName": "is-my-json-valid",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-08-02T15:04:45.880122Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/mafintosh/is-my-json-valid/commit/3419563687df463b4ca709a2b46be8e15d6a2b3d"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/894308"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.20.3"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "coveralls@2.13.3",
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.20.0"
        ],
        "upgradePath": [
          false,
          "tap@10.3.3",
          "coveralls@2.13.3",
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.20.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "name": "is-my-json-valid",
        "version": "2.20.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-08-17T15:07:51.732390Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[jsonpointer](https://www.npmjs.com/package/jsonpointer) is a Simple JSON Addressing.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `set` function.\r\n\r\n### POC by NerdJS\r\n```\r\nconst jsonpointer = require('jsonpointer');\r\njsonpointer.set({}, '/__proto__/polluted', true);\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jsonpointer` to version 4.1.0 or higher.\n## References\n- [GitHub Commit](https://github.com/janl/node-jsonpointer/commit/234e3437019c6c07537ed2ad1e03b3e132b85e34)\n",
        "disclosureTime": "2020-08-17T15:06:59Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.1.0"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-JSONPOINTER-598804",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-08-17T15:17:02.529823Z",
        "moduleName": "jsonpointer",
        "packageManager": "npm",
        "packageName": "jsonpointer",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-08-17T15:17:02.764391Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/janl/node-jsonpointer/commit/234e3437019c6c07537ed2ad1e03b3e132b85e34"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.1.0"
          ]
        },
        "severity": "high",
        "severityWithCritical": "critical",
        "title": "Prototype Pollution",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "coveralls@2.13.3",
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.20.0",
          "jsonpointer@4.0.1"
        ],
        "upgradePath": [
          false,
          "tap@10.3.3",
          "coveralls@2.13.3",
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.20.0",
          "jsonpointer@4.1.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "name": "jsonpointer",
        "version": "4.0.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "credit": [
          "Feng Xiao"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Information Exposure. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "disclosureTime": "2019-12-16T14:31:14Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "ctorName"
            },
            "version": [
              ">=6.0.0 <6.0.3"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            },
            "version": [
              ">=6.0.0 <6.0.3"
            ]
          }
        ],
        "id": "SNYK-JS-KINDOF-537849",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-200"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ],
          "NSP": [
            1490
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:55.567043Z",
        "moduleName": "kind-of",
        "packageManager": "npm",
        "packageName": "kind-of",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-19T14:31:13Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/jonschlinkert/kind-of/issues/30"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jonschlinkert/kind-of/pull/31"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "severity": "low",
        "severityWithCritical": "low",
        "title": "Information Exposure",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "nyc@11.9.0",
          "test-exclude@4.2.1",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "tap@10.3.3",
          "nyc@11.9.0",
          "test-exclude@4.2.1",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "name": "kind-of",
        "version": "6.0.2"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2019-06-20T09:34:56.241544Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[mixin-deep](https://www.npmjs.com/package/mixin-deep) is a package that deeply mixes the properties of objects into the first object.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `mixin-deep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mixin = require('mixin-deep');\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mixin({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n          console.log(`Vulnerable to Prototype Pollution via ${payload}`)\r\n  }\r\n}\r\n\r\ncheck();\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mixin-deep` to version 2.0.1, 1.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9)\n",
        "disclosureTime": "2019-06-19T09:34:10Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "1.3.2"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.copy"
            },
            "version": [
              "<1.1.1"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "copy"
            },
            "version": [
              ">=1.1.1 <2.0.0"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "mixinDeep"
            },
            "version": [
              ">=2.0.0 <2.0.1"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.copy"
            },
            "version": [
              "<1.1.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "copy"
            },
            "version": [
              ">=1.1.1 <2.0.0"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "mixinDeep"
            },
            "version": [
              ">=2.0.0 <2.0.1"
            ]
          }
        ],
        "id": "SNYK-JS-MIXINDEEP-450212",
        "identifiers": {
          "CVE": [
            "CVE-2019-10746"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            1013
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:37:00.759386Z",
        "moduleName": "mixin-deep",
        "packageManager": "npm",
        "packageName": "mixin-deep",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2019-06-20T09:34:08Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=2.0.0 <2.0.1",
            "<1.3.2"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "nyc@11.9.0",
          "test-exclude@4.2.1",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "mixin-deep@1.3.1"
        ],
        "upgradePath": [
          false,
          "tap@10.3.3",
          "nyc@11.9.0",
          "test-exclude@4.2.1",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "mixin-deep@1.3.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "name": "mixin-deep",
        "version": "1.3.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2019-06-20T09:40:41.272349Z",
        "credit": [
          "Jon Schlinkert"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\r\n\r\n## PoC by Snyk\r\n```\r\nconst setFn = require('set-value');\r\nconst paths = [\r\n  'constructor.prototype.a0',\r\n  '__proto__.a1',\r\n];\r\n\r\nfunction check() {\r\n  for (const p of paths) {\r\n      setFn({}, p, true);\r\n  }\r\n  for (let i = 0; i < paths.length; i++) {\r\n      if (({})[`a${i}`] === true) {\r\n          console.log(`Yes with ${paths[i]}`);\r\n      }\r\n  }\r\n}\r\n\r\ncheck();\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\n",
        "disclosureTime": "2019-06-19T09:38:54Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "3.0.1"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "create"
            },
            "version": [
              "<0.3.0"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports"
            },
            "version": [
              ">=0.3.0 <3.0.0"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "set"
            },
            "version": [
              ">=3.0.0 <3.0.1"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "create"
            },
            "version": [
              "<0.3.0"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            },
            "version": [
              ">=0.3.0 <3.0.0"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "set"
            },
            "version": [
              ">=3.0.0 <3.0.1"
            ]
          }
        ],
        "id": "SNYK-JS-SETVALUE-450213",
        "identifiers": {
          "CVE": [
            "CVE-2019-10747"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            1012
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:37:03.345163Z",
        "moduleName": "set-value",
        "packageManager": "npm",
        "packageName": "set-value",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2019-06-20T09:38:53Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://nodesecurity.io/advisories/1012"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1",
            ">=3.0.0 <3.0.1"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "nyc@11.9.0",
          "test-exclude@4.2.1",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "union-value@1.0.0",
          "set-value@0.4.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "set-value",
        "version": "0.4.3"
      },
      {
        "license": "LGPL-2.1",
        "semver": {
          "vulnerable": [
            ">=0"
          ]
        },
        "id": "snyk:lic:npm:tinymce:LGPL-2.1",
        "type": "license",
        "packageManager": "npm",
        "language": "js",
        "packageName": "tinymce",
        "title": "LGPL-2.1 license",
        "description": "LGPL-2.1 license",
        "publicationTime": "2020-10-07T18:11:40.139Z",
        "creationTime": "2020-10-07T18:11:40.139Z",
        "patches": [],
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/LGPL-2.1.txt",
        "severity": "medium",
        "from": [
          "goof@1.0.1",
          "tinymce@4.1.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "tinymce",
        "version": "4.1.0"
      },
      {
        "license": "BSD-2-Clause",
        "semver": {
          "vulnerable": [
            ">=0"
          ]
        },
        "id": "snyk:lic:npm:coveralls:BSD-2-Clause",
        "type": "license",
        "packageManager": "npm",
        "language": "js",
        "packageName": "coveralls",
        "title": "BSD-2-Clause license",
        "description": "BSD-2-Clause license",
        "publicationTime": "2020-10-07T13:08:37.836Z",
        "creationTime": "2020-10-07T13:08:37.836Z",
        "patches": [],
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/BSD-2-Clause.txt",
        "severity": "medium",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "coveralls@2.13.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "coveralls",
        "version": "2.13.3"
      },
      {
        "license": "BSD-2-Clause",
        "semver": {
          "vulnerable": [
            ">=2.0.0"
          ]
        },
        "id": "snyk:lic:npm:deeper:BSD-2-Clause",
        "type": "license",
        "packageManager": "npm",
        "language": "js",
        "packageName": "deeper",
        "title": "BSD-2-Clause license",
        "description": "BSD-2-Clause license",
        "publicationTime": "2020-10-07T13:18:06.571Z",
        "creationTime": "2020-10-07T13:18:06.571Z",
        "patches": [],
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/BSD-2-Clause.txt",
        "severity": "medium",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "deeper@2.1.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "deeper",
        "version": "2.1.0"
      },
      {
        "license": "BSD-2-Clause",
        "semver": {
          "vulnerable": [
            ">=0"
          ]
        },
        "id": "snyk:lic:npm:esprima:BSD-2-Clause",
        "type": "license",
        "packageManager": "npm",
        "language": "js",
        "packageName": "esprima",
        "title": "BSD-2-Clause license",
        "description": "BSD-2-Clause license",
        "publicationTime": "2020-10-07T13:38:05.651Z",
        "creationTime": "2020-10-07T13:38:05.651Z",
        "patches": [],
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/BSD-2-Clause.txt",
        "severity": "medium",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "coveralls@2.13.3",
          "js-yaml@3.6.1",
          "esprima@2.7.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "esprima",
        "version": "2.7.3"
      },
      {
        "license": "BSD-2-Clause",
        "semver": {
          "vulnerable": [
            ">=0"
          ]
        },
        "id": "snyk:lic:npm:esutils:BSD-2-Clause",
        "type": "license",
        "packageManager": "npm",
        "language": "js",
        "packageName": "esutils",
        "title": "BSD-2-Clause license",
        "description": "BSD-2-Clause license",
        "publicationTime": "2020-10-07T13:38:16.113Z",
        "creationTime": "2020-10-07T13:38:16.113Z",
        "patches": [],
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/BSD-2-Clause.txt",
        "severity": "medium",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-lib-instrument@1.10.1",
          "babel-template@6.26.0",
          "babel-traverse@6.26.0",
          "babel-code-frame@6.26.0",
          "esutils@2.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "esutils",
        "version": "2.0.2"
      },
      {
        "license": "GPL-2.0",
        "semver": {
          "vulnerable": [
            ">=0"
          ]
        },
        "id": "snyk:lic:npm:goof:GPL-2.0",
        "type": "license",
        "packageManager": "npm",
        "language": "js",
        "packageName": "goof",
        "title": "GPL-2.0 license",
        "description": "GPL-2.0 license",
        "publicationTime": "2020-10-07T14:15:59.117Z",
        "creationTime": "2020-10-07T14:15:59.117Z",
        "patches": [],
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/GPL-2.0.txt",
        "severity": "high",
        "from": [
          "goof@1.0.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "goof",
        "version": "1.0.1"
      },
      {
        "license": "BSD-2-Clause",
        "semver": {
          "vulnerable": [
            ">=0"
          ]
        },
        "id": "snyk:lic:npm:normalize-package-data:BSD-2-Clause",
        "type": "license",
        "packageManager": "npm",
        "language": "js",
        "packageName": "normalize-package-data",
        "title": "BSD-2-Clause license",
        "description": "BSD-2-Clause license",
        "publicationTime": "2020-10-07T16:16:35.342Z",
        "creationTime": "2020-10-07T16:16:35.342Z",
        "patches": [],
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/BSD-2-Clause.txt",
        "severity": "medium",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "nyc@11.9.0",
          "test-exclude@4.2.1",
          "read-pkg-up@1.0.1",
          "read-pkg@1.1.0",
          "normalize-package-data@2.4.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "normalize-package-data",
        "version": "2.4.0"
      },
      {
        "license": "BSD-2-Clause",
        "semver": {
          "vulnerable": [
            ">=0"
          ]
        },
        "id": "snyk:lic:npm:uglify-js:BSD-2-Clause",
        "type": "license",
        "packageManager": "npm",
        "language": "js",
        "packageName": "uglify-js",
        "title": "BSD-2-Clause license",
        "description": "BSD-2-Clause license",
        "publicationTime": "2020-10-07T18:23:26.467Z",
        "creationTime": "2020-10-07T18:23:26.467Z",
        "patches": [],
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/BSD-2-Clause.txt",
        "severity": "medium",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "nyc@11.9.0",
          "istanbul-reports@1.4.0",
          "handlebars@4.0.11",
          "uglify-js@2.8.29"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "uglify-js",
        "version": "2.8.29"
      }
    ],
    "upgrade": {
      "@snyk/nodejs-runtime-agent@1.43.0": {
        "upgradeTo": "@snyk/nodejs-runtime-agent@1.46.1",
        "upgrades": [
          "acorn@5.7.1"
        ],
        "vulns": [
          "SNYK-JS-ACORN-559469"
        ]
      },
      "body-parser@1.9.0": {
        "upgradeTo": "body-parser@1.17.1",
        "upgrades": [
          "qs@2.2.4",
          "qs@2.2.4"
        ],
        "vulns": [
          "npm:qs:20170213",
          "snyk:lic:npm:qs:BSD-2-Clause"
        ]
      },
      "dustjs-linkedin@2.5.0": {
        "upgradeTo": "dustjs-linkedin@2.6.0",
        "upgrades": [
          "dustjs-linkedin@2.5.0"
        ],
        "vulns": [
          "npm:dustjs-linkedin:20160819"
        ]
      },
      "ejs@1.0.0": {
        "upgradeTo": "ejs@2.5.5",
        "upgrades": [
          "ejs@1.0.0",
          "ejs@1.0.0",
          "ejs@1.0.0"
        ],
        "vulns": [
          "npm:ejs:20161130",
          "npm:ejs:20161130-1",
          "npm:ejs:20161128"
        ]
      },
      "errorhandler@1.2.0": {
        "upgradeTo": "errorhandler@1.4.3",
        "upgrades": [
          "negotiator@0.4.9"
        ],
        "vulns": [
          "npm:negotiator:20160616"
        ]
      },
      "express@4.12.4": {
        "upgradeTo": "express@4.16.0",
        "upgrades": [
          "mime@1.3.4",
          "debug@2.2.0",
          "fresh@0.2.4",
          "ms@0.7.1",
          "qs@2.4.2",
          "negotiator@0.5.3",
          "qs@2.4.2"
        ],
        "vulns": [
          "npm:mime:20170907",
          "npm:debug:20170905",
          "npm:fresh:20170908",
          "npm:ms:20170412",
          "npm:qs:20170213",
          "npm:negotiator:20160616",
          "snyk:lic:npm:qs:BSD-2-Clause"
        ]
      },
      "express-fileupload@0.0.5": {
        "upgradeTo": "express-fileupload@1.1.10",
        "upgrades": [
          "express-fileupload@0.0.5",
          "express-fileupload@0.0.5"
        ],
        "vulns": [
          "SNYK-JS-EXPRESSFILEUPLOAD-595969",
          "SNYK-JS-EXPRESSFILEUPLOAD-473997"
        ]
      },
      "jquery@2.2.4": {
        "upgradeTo": "jquery@3.5.0",
        "upgrades": [
          "jquery@2.2.4",
          "jquery@2.2.4",
          "jquery@2.2.4",
          "jquery@2.2.4"
        ],
        "vulns": [
          "SNYK-JS-JQUERY-565129",
          "SNYK-JS-JQUERY-567880",
          "SNYK-JS-JQUERY-174006",
          "npm:jquery:20150627"
        ]
      },
      "lodash@4.17.4": {
        "upgradeTo": "lodash@4.17.20",
        "upgrades": [
          "lodash@4.17.4",
          "lodash@4.17.4",
          "lodash@4.17.4",
          "lodash@4.17.4",
          "lodash@4.17.4",
          "lodash@4.17.4",
          "lodash@4.17.4"
        ],
        "vulns": [
          "SNYK-JS-LODASH-590103",
          "SNYK-JS-LODASH-608086",
          "SNYK-JS-LODASH-567746",
          "SNYK-JS-LODASH-450202",
          "SNYK-JS-LODASH-73638",
          "SNYK-JS-LODASH-73639",
          "npm:lodash:20180130"
        ]
      },
      "marked@0.3.5": {
        "upgradeTo": "marked@1.1.1",
        "upgrades": [
          "marked@0.3.5",
          "marked@0.3.5",
          "marked@0.3.5",
          "marked@0.3.5",
          "marked@0.3.5",
          "marked@0.3.5",
          "marked@0.3.5",
          "marked@0.3.5",
          "marked@0.3.5"
        ],
        "vulns": [
          "SNYK-JS-MARKED-584281",
          "SNYK-JS-MARKED-174116",
          "SNYK-JS-MARKED-451540",
          "npm:marked:20180225",
          "npm:marked:20170815",
          "npm:marked:20170815-1",
          "npm:marked:20170907",
          "npm:marked:20170112",
          "npm:marked:20150520"
        ]
      },
      "moment@2.15.1": {
        "upgradeTo": "moment@2.19.3",
        "upgrades": [
          "moment@2.15.1",
          "moment@2.15.1"
        ],
        "vulns": [
          "npm:moment:20170905",
          "npm:moment:20161019"
        ]
      },
      "mongoose@4.2.4": {
        "upgradeTo": "mongoose@5.4.10",
        "upgrades": [
          "mongodb@2.0.46",
          "mongoose@4.2.4",
          "debug@2.2.0",
          "ms@0.7.1",
          "mongoose@4.2.4",
          "kerberos@0.0.24"
        ],
        "vulns": [
          "SNYK-JS-MONGODB-473855",
          "SNYK-JS-MONGOOSE-472486",
          "npm:debug:20170905",
          "npm:ms:20170412",
          "npm:mongoose:20160116",
          "SNYK-JS-KERBEROS-568900"
        ]
      },
      "ms@0.7.3": {
        "upgradeTo": "ms@2.0.0",
        "upgrades": [
          "ms@0.7.3"
        ],
        "vulns": [
          "npm:ms:20170412"
        ]
      },
      "npmconf@0.0.24": {
        "upgradeTo": "npmconf@2.0.9",
        "upgrades": [
          "semver@1.1.4",
          "npmconf@0.0.24",
          "osenv@0.0.3",
          "once@1.1.1"
        ],
        "vulns": [
          "npm:semver:20150403",
          "snyk:lic:npm:npmconf:BSD-2-Clause",
          "snyk:lic:npm:osenv:BSD-2-Clause",
          "snyk:lic:npm:once:BSD-2-Clause"
        ]
      },
      "st@0.2.4": {
        "upgradeTo": "st@1.2.2",
        "upgrades": [
          "st@0.2.4",
          "mime@1.2.11",
          "negotiator@0.2.8",
          "st@0.2.4",
          "graceful-fs@1.2.3",
          "st@0.2.4"
        ],
        "vulns": [
          "npm:st:20171013",
          "npm:mime:20170907",
          "npm:negotiator:20160616",
          "snyk:lic:npm:st:BSD-2-Clause",
          "snyk:lic:npm:graceful-fs:BSD-2-Clause",
          "npm:st:20140206"
        ]
      },
      "tap@10.3.3": {
        "upgradeTo": "tap@14.6.8",
        "upgrades": [
          "diff@1.4.0",
          "yargs-parser@9.0.2",
          "mem@1.1.0",
          "js-yaml@3.6.1",
          "js-yaml@3.6.1",
          "minimist@1.2.0",
          "tunnel-agent@0.4.3",
          "sntp@1.0.9"
        ],
        "vulns": [
          "snyk:lic:npm:diff:BSD-2-Clause",
          "SNYK-JS-YARGSPARSER-560381",
          "npm:mem:20180117",
          "SNYK-JS-JSYAML-173999",
          "SNYK-JS-JSYAML-174129",
          "SNYK-JS-MINIMIST-559764",
          "npm:tunnel-agent:20170305",
          "snyk:lic:npm:sntp:BSD-2-Clause"
        ]
      },
      "tinymce@4.1.0": {
        "upgradeTo": "tinymce@4.9.11",
        "upgrades": [
          "tinymce@4.1.0",
          "tinymce@4.1.0",
          "tinymce@4.1.0",
          "tinymce@4.1.0",
          "tinymce@4.1.0",
          "tinymce@4.1.0",
          "tinymce@4.1.0"
        ],
        "vulns": [
          "SNYK-JS-TINYMCE-598223",
          "SNYK-JS-TINYMCE-568922",
          "SNYK-JS-TINYMCE-543825",
          "npm:tinymce:20170613",
          "npm:tinymce:20180522",
          "npm:tinymce:20150813",
          "npm:tinymce:20150610"
        ]
      }
    },
    "patch": {
      "SNYK-JS-LODASH-567746": {
        "paths": [
          {
            "tap > nyc > istanbul-lib-instrument > babel-types > lodash": {
              "patched": "2020-10-08T23:52:52.630Z"
            }
          },
          {
            "tap > nyc > istanbul-lib-instrument > babel-generator > lodash": {
              "patched": "2020-10-08T23:52:52.630Z"
            }
          },
          {
            "tap > nyc > istanbul-lib-instrument > babel-traverse > lodash": {
              "patched": "2020-10-08T23:52:52.630Z"
            }
          },
          {
            "tap > nyc > istanbul-lib-instrument > babel-template > lodash": {
              "patched": "2020-10-08T23:52:52.630Z"
            }
          },
          {
            "tap > nyc > istanbul-lib-instrument > babel-generator > babel-types > lodash": {
              "patched": "2020-10-08T23:52:52.630Z"
            }
          },
          {
            "tap > nyc > istanbul-lib-instrument > babel-traverse > babel-types > lodash": {
              "patched": "2020-10-08T23:52:52.630Z"
            }
          },
          {
            "tap > nyc > istanbul-lib-instrument > babel-template > babel-types > lodash": {
              "patched": "2020-10-08T23:52:52.630Z"
            }
          },
          {
            "tap > nyc > istanbul-lib-instrument > babel-template > babel-traverse > lodash": {
              "patched": "2020-10-08T23:52:52.630Z"
            }
          },
          {
            "tap > nyc > istanbul-lib-instrument > babel-template > babel-traverse > babel-types > lodash": {
              "patched": "2020-10-08T23:52:52.630Z"
            }
          }
        ]
      },
      "npm:ms:20151024": {
        "paths": [
          {
            "humanize-ms > ms": {
              "patched": "2020-10-08T23:52:52.630Z"
            }
          }
        ]
      }
    },
    "ignore": {},
    "pin": {}
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:H/A:H/E:H/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-ADMZIP-11093"
        ],
        "creationTime": "2018-05-30T12:09:16.138000Z",
        "credit": [
          "Snyk Security Research",
          "Sébastien Mignot",
          "Alex Chapman"
        ],
        "cvssScore": 9.4,
        "description": "## Overview\n\n[adm-zip](https://www.npmjs.com/package/adm-zip) is a JavaScript implementation for zip data compression for NodeJS.\n\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip).\n\n## Details\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \"../../file.exe\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n\r\n+2018-04-15 22:04:29 ..... 19 19 good.txt\r\n\r\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\r\n\r\n```\n\n## Remediation\n\nUpgrade `adm-zip` to version 0.4.11 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/cthackers/adm-zip/commit/d01fa8c80c3a5fcf5ce1eda82d96600c62910d3f)\n\n- [GitHub Commit](https://github.com/cthackers/adm-zip/pull/212/commits/6f4dfeb9a2166e93207443879988f97d88a37cde)\n\n- [Hackerone Report](https://hackerone.com/reports/362118)\n\n- [Zip Slip Advisory](https://github.com/snyk/zip-slip-vulnerability)\n\n- [Zip Slip Advisory](https://snyk.io/research/zip-slip-vulnerability)\n",
        "disclosureTime": "2018-04-14T21:00:00Z",
        "exploit": "High",
        "fixedIn": [
          "0.4.11"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "adm-zip.js",
              "functionName": "module.exports.getEntry"
            },
            "version": [
              ">0.1.1 <0.4.11"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "adm-zip.js",
              "functionName": "module.exports.getEntry"
            },
            "version": [
              ">0.1.1 <0.4.11"
            ]
          }
        ],
        "id": "npm:adm-zip:20180415",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-ADMZIP-11093"
          ],
          "CVE": [
            "CVE-2018-1002204"
          ],
          "CWE": [
            "CWE-29"
          ],
          "NSP": [
            994,
            681
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-09T09:57:45.895381Z",
        "moduleName": "adm-zip",
        "packageManager": "npm",
        "packageName": "adm-zip",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2018-05-31T07:09:16Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/cthackers/adm-zip/commit/d01fa8c80c3a5fcf5ce1eda82d96600c62910d3f"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/cthackers/adm-zip/pull/212/commits/6f4dfeb9a2166e93207443879988f97d88a37cde"
          },
          {
            "title": "Hackerone Report",
            "url": "https://hackerone.com/reports/362118"
          },
          {
            "title": "Zip Slip Advisory",
            "url": "https://github.com/snyk/zip-slip-vulnerability"
          },
          {
            "title": "Zip Slip Advisory",
            "url": "https://snyk.io/research/zip-slip-vulnerability"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.4.11"
          ]
        },
        "severity": "high",
        "severityWithCritical": "critical",
        "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
        "from": [
          "goof@1.0.1",
          "adm-zip@0.4.7"
        ],
        "upgradePath": [
          false,
          "adm-zip@0.4.11"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "adm-zip",
        "version": "0.4.7",
        "filtered": {
          "ignored": [
            {
              "reason": "",
              "created": "2020-05-26T16:01:38.822Z",
              "ignoredBy": {
                "id": "d992a01f-f4f0-4555-9355-a12e00264840",
                "name": "Kriti Dogra",
                "email": "kriti.dogra@snyk.io"
              },
              "reasonType": "temporary-ignore",
              "disregardIfFixable": false,
              "source": "api",
              "path": [
                "*"
              ]
            }
          ]
        }
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [
          "SNYK-JS-HOEK-12061"
        ],
        "creationTime": "2018-02-12T22:28:27.612000Z",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is an Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar Hoek = require('hoek');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\nHoek.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hoek` to version 4.2.1, 5.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)\n- [GitHub Issue](https://github.com/hapijs/hoek/issues/230)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [NPM Security Advisory](http://npmjs.com/advisories/566)\n",
        "disclosureTime": "2018-02-12T22:28:27Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.2.1",
          "5.0.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lib/hoek.js",
              "functionName": "exports.merge"
            },
            "version": [
              "<0.0.19"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">0.0.18 <4.2.1"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">=5.0.0 <5.0.3"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "lib/hoek.js",
              "functionName": "exports.merge"
            },
            "version": [
              "<0.0.19"
            ]
          },
          {
            "functionId": {
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">0.0.18 <4.2.1"
            ]
          },
          {
            "functionId": {
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">=5.0.0 <5.0.3"
            ]
          }
        ],
        "id": "npm:hoek:20180212",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-HOEK-12061"
          ],
          "CVE": [
            "CVE-2018-3728"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            566
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:45.981220Z",
        "moduleName": "hoek",
        "packageManager": "npm",
        "packageName": "hoek",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:0",
            "modificationTime": "2019-12-03T11:40:45.879582Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
            ],
            "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0"
          },
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:1",
            "modificationTime": "2019-12-03T11:40:45.880722Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
            ],
            "version": ">=2.0.0 <3.0.0"
          }
        ],
        "proprietary": false,
        "publicationTime": "2018-02-14T13:22:50Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/hapijs/hoek/issues/230"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/hapijs/hoek/pull/227"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/310439"
          },
          {
            "title": "NPM Security Advisory",
            "url": "http://npmjs.com/advisories/566"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.2.1",
            ">=5.0.0 <5.0.3"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "coveralls@2.13.3",
          "request@2.79.0",
          "hawk@3.1.3",
          "hoek@2.16.3"
        ],
        "upgradePath": [
          false,
          "tap@11.1.3",
          "coveralls@3.0.0",
          "request@2.82.0",
          "hawk@6.0.2",
          "hoek@4.2.1"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "hoek",
        "version": "2.16.3",
        "filtered": {
          "ignored": [
            {
              "reason": "",
              "created": "2019-08-07T17:40:22.632Z",
              "ignoredBy": {
                "id": "d992a01f-f4f0-4555-9355-a12e00264840",
                "name": "Kriti Dogra",
                "email": "kriti.dogra@snyk.io"
              },
              "reasonType": "temporary-ignore",
              "disregardIfFixable": false,
              "source": "api",
              "path": [
                "*"
              ]
            }
          ]
        }
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [
          "SNYK-JS-HOEK-12061"
        ],
        "creationTime": "2018-02-12T22:28:27.612000Z",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is an Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar Hoek = require('hoek');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\nHoek.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hoek` to version 4.2.1, 5.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)\n- [GitHub Issue](https://github.com/hapijs/hoek/issues/230)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [NPM Security Advisory](http://npmjs.com/advisories/566)\n",
        "disclosureTime": "2018-02-12T22:28:27Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.2.1",
          "5.0.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lib/hoek.js",
              "functionName": "exports.merge"
            },
            "version": [
              "<0.0.19"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">0.0.18 <4.2.1"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">=5.0.0 <5.0.3"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "lib/hoek.js",
              "functionName": "exports.merge"
            },
            "version": [
              "<0.0.19"
            ]
          },
          {
            "functionId": {
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">0.0.18 <4.2.1"
            ]
          },
          {
            "functionId": {
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">=5.0.0 <5.0.3"
            ]
          }
        ],
        "id": "npm:hoek:20180212",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-HOEK-12061"
          ],
          "CVE": [
            "CVE-2018-3728"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            566
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:45.981220Z",
        "moduleName": "hoek",
        "packageManager": "npm",
        "packageName": "hoek",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:0",
            "modificationTime": "2019-12-03T11:40:45.879582Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
            ],
            "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0"
          },
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:1",
            "modificationTime": "2019-12-03T11:40:45.880722Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
            ],
            "version": ">=2.0.0 <3.0.0"
          }
        ],
        "proprietary": false,
        "publicationTime": "2018-02-14T13:22:50Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/hapijs/hoek/issues/230"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/hapijs/hoek/pull/227"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/310439"
          },
          {
            "title": "NPM Security Advisory",
            "url": "http://npmjs.com/advisories/566"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.2.1",
            ">=5.0.0 <5.0.3"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "coveralls@2.13.3",
          "request@2.79.0",
          "hawk@3.1.3",
          "boom@2.10.1",
          "hoek@2.16.3"
        ],
        "upgradePath": [
          false,
          "tap@11.1.3",
          "coveralls@3.0.0",
          "request@2.82.0",
          "hawk@6.0.2",
          "boom@4.0.0",
          "hoek@4.2.1"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "hoek",
        "version": "2.16.3",
        "filtered": {
          "ignored": [
            {
              "reason": "",
              "created": "2019-08-07T17:40:22.632Z",
              "ignoredBy": {
                "id": "d992a01f-f4f0-4555-9355-a12e00264840",
                "name": "Kriti Dogra",
                "email": "kriti.dogra@snyk.io"
              },
              "reasonType": "temporary-ignore",
              "disregardIfFixable": false,
              "source": "api",
              "path": [
                "*"
              ]
            }
          ]
        }
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [
          "SNYK-JS-HOEK-12061"
        ],
        "creationTime": "2018-02-12T22:28:27.612000Z",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is an Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar Hoek = require('hoek');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\nHoek.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hoek` to version 4.2.1, 5.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)\n- [GitHub Issue](https://github.com/hapijs/hoek/issues/230)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [NPM Security Advisory](http://npmjs.com/advisories/566)\n",
        "disclosureTime": "2018-02-12T22:28:27Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.2.1",
          "5.0.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lib/hoek.js",
              "functionName": "exports.merge"
            },
            "version": [
              "<0.0.19"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">0.0.18 <4.2.1"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">=5.0.0 <5.0.3"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "lib/hoek.js",
              "functionName": "exports.merge"
            },
            "version": [
              "<0.0.19"
            ]
          },
          {
            "functionId": {
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">0.0.18 <4.2.1"
            ]
          },
          {
            "functionId": {
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">=5.0.0 <5.0.3"
            ]
          }
        ],
        "id": "npm:hoek:20180212",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-HOEK-12061"
          ],
          "CVE": [
            "CVE-2018-3728"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            566
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:45.981220Z",
        "moduleName": "hoek",
        "packageManager": "npm",
        "packageName": "hoek",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:0",
            "modificationTime": "2019-12-03T11:40:45.879582Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
            ],
            "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0"
          },
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:1",
            "modificationTime": "2019-12-03T11:40:45.880722Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
            ],
            "version": ">=2.0.0 <3.0.0"
          }
        ],
        "proprietary": false,
        "publicationTime": "2018-02-14T13:22:50Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/hapijs/hoek/issues/230"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/hapijs/hoek/pull/227"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/310439"
          },
          {
            "title": "NPM Security Advisory",
            "url": "http://npmjs.com/advisories/566"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.2.1",
            ">=5.0.0 <5.0.3"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "coveralls@2.13.3",
          "request@2.79.0",
          "hawk@3.1.3",
          "sntp@1.0.9",
          "hoek@2.16.3"
        ],
        "upgradePath": [
          false,
          "tap@11.1.3",
          "coveralls@3.0.0",
          "request@2.82.0",
          "hawk@6.0.2",
          "sntp@2.0.1",
          "hoek@4.2.1"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "hoek",
        "version": "2.16.3",
        "filtered": {
          "ignored": [
            {
              "reason": "",
              "created": "2019-08-07T17:40:22.632Z",
              "ignoredBy": {
                "id": "d992a01f-f4f0-4555-9355-a12e00264840",
                "name": "Kriti Dogra",
                "email": "kriti.dogra@snyk.io"
              },
              "reasonType": "temporary-ignore",
              "disregardIfFixable": false,
              "source": "api",
              "path": [
                "*"
              ]
            }
          ]
        }
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [
          "SNYK-JS-HOEK-12061"
        ],
        "creationTime": "2018-02-12T22:28:27.612000Z",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is an Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar Hoek = require('hoek');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\nHoek.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hoek` to version 4.2.1, 5.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)\n- [GitHub Issue](https://github.com/hapijs/hoek/issues/230)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [NPM Security Advisory](http://npmjs.com/advisories/566)\n",
        "disclosureTime": "2018-02-12T22:28:27Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.2.1",
          "5.0.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lib/hoek.js",
              "functionName": "exports.merge"
            },
            "version": [
              "<0.0.19"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">0.0.18 <4.2.1"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">=5.0.0 <5.0.3"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "lib/hoek.js",
              "functionName": "exports.merge"
            },
            "version": [
              "<0.0.19"
            ]
          },
          {
            "functionId": {
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">0.0.18 <4.2.1"
            ]
          },
          {
            "functionId": {
              "filePath": "lib/index.js",
              "functionName": "exports.merge"
            },
            "version": [
              ">=5.0.0 <5.0.3"
            ]
          }
        ],
        "id": "npm:hoek:20180212",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-HOEK-12061"
          ],
          "CVE": [
            "CVE-2018-3728"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            566
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:45.981220Z",
        "moduleName": "hoek",
        "packageManager": "npm",
        "packageName": "hoek",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:0",
            "modificationTime": "2019-12-03T11:40:45.879582Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
            ],
            "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0"
          },
          {
            "comments": [],
            "id": "patch:npm:hoek:20180212:1",
            "modificationTime": "2019-12-03T11:40:45.880722Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
            ],
            "version": ">=2.0.0 <3.0.0"
          }
        ],
        "proprietary": false,
        "publicationTime": "2018-02-14T13:22:50Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/hapijs/hoek/issues/230"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/hapijs/hoek/pull/227"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/310439"
          },
          {
            "title": "NPM Security Advisory",
            "url": "http://npmjs.com/advisories/566"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.2.1",
            ">=5.0.0 <5.0.3"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "goof@1.0.1",
          "tap@10.3.3",
          "coveralls@2.13.3",
          "request@2.79.0",
          "hawk@3.1.3",
          "cryptiles@2.0.5",
          "boom@2.10.1",
          "hoek@2.16.3"
        ],
        "upgradePath": [
          false,
          "tap@11.1.3",
          "coveralls@3.0.0",
          "request@2.82.0",
          "hawk@6.0.2",
          "cryptiles@3.0.0",
          "boom@3.1.3",
          "hoek@4.2.1"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "hoek",
        "version": "2.16.3",
        "filtered": {
          "ignored": [
            {
              "reason": "",
              "created": "2019-08-07T17:40:22.632Z",
              "ignoredBy": {
                "id": "d992a01f-f4f0-4555-9355-a12e00264840",
                "name": "Kriti Dogra",
                "email": "kriti.dogra@snyk.io"
              },
              "reasonType": "temporary-ignore",
              "disregardIfFixable": false,
              "source": "api",
              "path": [
                "*"
              ]
            }
          ]
        }
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:N/A:N/E:F/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-NPMCONF-12143"
        ],
        "creationTime": "2018-02-27T09:54:39.824000Z",
        "credit": [
          "ChALkeR"
        ],
        "cvssScore": 7.4,
        "description": "## Overview\n\n[npmconf](https://www.npmjs.com/package/npmconf) is a package to reintegrate directly into npm.\n\n\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure.\nIt allocates and writes to disk uninitialized memory content when a typed number is passed as input.\r\n\r\n**Note** `npmconf` is deprecated and should not be used.\r\n**Note** This is vulnerable only for Node <=4\n\n## Details\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\r\n```js\r\nconst buf1 = new Buffer([1,2,3]);\r\n// creates a buffer containing [01, 02, 03]\r\nconst buf2 = new Buffer('test');\r\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\r\nconst buf3 = new Buffer(10);\r\n// creates a buffer of length 10\r\n```\r\n\r\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\r\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\n\n## Remediation\n\nUpgrade `npmconf` to version 2.1.3 or higher.\n\n\n## References\n\n- [HAckerOne Report](https://hackerone.com/reports/320269)\n",
        "disclosureTime": "2018-05-12T09:54:39Z",
        "exploit": "Functional",
        "fixedIn": [
          "2.1.3"
        ],
        "functions": [],
        "functions_new": [],
        "id": "npm:npmconf:20180512",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-NPMCONF-12143"
          ],
          "CVE": [],
          "CWE": [
            "CWE-201"
          ],
          "GHSA": [
            "GHSA-57cf-349j-352g"
          ],
          "NSP": [
            653
          ]
        },
        "language": "js",
        "modificationTime": "2019-12-23T15:57:26.534891Z",
        "moduleName": "npmconf",
        "packageManager": "npm",
        "packageName": "npmconf",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-05-13T14:26:27Z",
        "references": [
          {
            "title": "HAckerOne Report",
            "url": "https://hackerone.com/reports/320269"
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.1.3"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Uninitialized Memory Exposure",
        "from": [
          "goof@1.0.1",
          "npmconf@0.0.24"
        ],
        "upgradePath": [
          false,
          "npmconf@2.1.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "npmconf",
        "version": "0.0.24",
        "filtered": {
          "ignored": [
            {
              "reason": "",
              "created": "2020-10-01T20:17:55.719Z",
              "expires": "2020-10-31T20:17:44.159Z",
              "ignoredBy": {
                "id": "d992a01f-f4f0-4555-9355-a12e00264840",
                "name": "Kriti Dogra",
                "email": "kriti.dogra@snyk.io"
              },
              "reasonType": "temporary-ignore",
              "disregardIfFixable": false,
              "source": "api",
              "path": [
                "*"
              ]
            }
          ]
        }
      }
    ],
    "patch": []
  },
  "uniqueCount": 85,
  "projectName": "goof",
  "foundProjectCount": 1,
  "displayTargetFile": "package-lock.json",
  "path": "/Users/kriti/Documents/goof"
}
